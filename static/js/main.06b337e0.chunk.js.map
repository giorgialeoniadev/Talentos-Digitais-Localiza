{"version":3,"sources":["components/Header.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/SearchBar.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Rating","rating","this","props","MovieCard","movie","title","subtitle","storyline","imagePath","alt","src","MovieList","movies","map","key","SearchBar","searchText","onSearchTextChange","htmlFor","type","id","name","value","onChange","onBookmarkedChange","bookmarkedOnly","checked","selectedGenre","onSelectedGenreChange","inputText","checkbox","select","AddMovie","state","genre","onClickAddMovie","bind","onClick","resetForm","setState","placeholder","event","target","min","max","Number","renderTitleInput","renderSubtitleInput","renderImageInput","renderStorylineInput","renderRatingInput","renderGenreInput","MovieLibrary","setSearchedText","setBookMarkedOnly","setSelectedGenre","newMovie","filter","bookmarked","lowerCaseSearchText","toLowerCase","lowerCaseTitle","lowerCaseSubtitle","lowerCaseStoryline","includes","bookmarkedMovies","filterBookMarkedMovies","genrefied","filterByGenre","filterBySearch","filteredMovies","filterMovies","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06b337e0.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nexport default Rating;\n","import React from 'react';\n\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n        <div className=\"movie-card-body\">\n          <h4 className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={rating} />\n      </div>\n    );\n  }\n}\n\nexport default MovieCard;\n","import React from 'react';\n\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div className=\"movie-list\">\n        {movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends Component {\n  inputText(searchText) {\n    const { onSearchTextChange } = this.props;\n    return (\n      <label htmlFor=\"InputText\">\n        <p>Pesquise aqui</p>\n        <input\n          type=\"text\"\n          id=\"InputText\"\n          className=\"searchInput\"\n          name=\"InputText\"\n          value={searchText}\n          onChange={onSearchTextChange}\n        />\n      </label>\n    );\n  }\n\n  checkbox() {\n    const { onBookmarkedChange, bookmarkedOnly } = this.props;\n    return (\n      <label htmlFor=\"InputCheck\">\n        <input\n          type=\"checkbox\"\n          id=\"InputCheck\"\n          checked={bookmarkedOnly}\n          onChange={onBookmarkedChange}\n        />\n        <p>Mostrar somente favoritos</p>\n      </label>\n    );\n  }\n\n  select() {\n    const { selectedGenre, onSelectedGenreChange } = this.props;\n    return (\n      <div>\n        <label htmlFor=\"select\">\n          <p>Filtrar por gÃªnero</p>\n          <select name=\"select\" id=\"select\" className=\"genreSel\" value={selectedGenre} onChange={onSelectedGenreChange}>\n            <option value=\"\">Todos</option>\n            <option value=\"action\">AÃ§Ã£o</option>\n            <option value=\"comedy\">ComÃ©dia</option>\n            <option value=\"thriller\">Suspense</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n\n  render() {\n    const { searchText, bookmarkedOnly, selectedGenre } = this.props;\n    return (\n      <div className=\"searchForm\">\n        <form>\n          {this.inputText(searchText)}\n          <br />\n          {this.checkbox(bookmarkedOnly)}\n          <br />\n          {this.select(selectedGenre)}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './AddMovie.css';\n\nclass AddMovie extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      subtitle: '',\n      storyline: '',\n      imagePath: '',\n      rating: 0,\n      genre: 'action',\n    };\n\n    this.onClickAddMovie = this.onClickAddMovie.bind(this);\n  }\n\n  onClickAddMovie() {\n    const { onClick } = this.props;\n    const {\n      title,\n      subtitle,\n      storyline,\n      imagePath,\n      rating,\n      genre,\n    } = this.state;\n    const newMovie = {\n      title,\n      subtitle,\n      storyline,\n      imagePath,\n      rating,\n      genre,\n    };\n    onClick(newMovie);\n    this.resetForm();\n  }\n\n\n  resetForm() {\n    this.setState({\n      title: '',\n      subtitle: '',\n      storyline: '',\n      imagePath: '',\n      rating: 0,\n      genre: 'action',\n    });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n    return (\n      <label htmlFor=\"title\">\n        <p>TÃ­tulo</p>\n        <input\n          type=\"text\"\n          id=\"title\"\n          className=\"oneLineInputs\"\n          placeholder=\"Insira aqui o tÃ­tulo do Filme\"\n          name=\"title\"\n          value={title}\n          onChange={(event) => this.setState({ title: event.target.value })}\n        />\n      </label>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n    return (\n      <label htmlFor=\"subtitle\">\n        <p>SubtÃ­tulo</p>\n        <input\n          type=\"text\"\n          id=\"subtitle\"\n          className=\"oneLineInputs\"\n          placeholder=\"Insira aqui o subtÃ­tulo do Filme\"\n          name=\"subtitle\"\n          value={subtitle}\n          onChange={(event) => this.setState({ subtitle: event.target.value })}\n        />\n      </label>\n    );\n  }\n\n  renderImageInput() {\n    const { imagePath } = this.state;\n    return (\n      <label htmlFor=\"imagem\">\n        <p>Imagem</p>\n        <input\n          type=\"text\"\n          id=\"image\"\n          className=\"oneLineInputs\"\n          placeholder=\"Insira aqui a URL de uma imagem\"\n          name=\"image\"\n          value={imagePath}\n          onChange={(event) => {\n            this.setState({ imagePath: event.target.value });\n          }}\n        />\n      </label>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n    return (\n      <label htmlFor=\"storyline\">\n        <p>Sinopse</p>\n        <textarea\n          type=\"text\"\n          id=\"storyline\"\n          className=\"storylineInput\"\n          name=\"storyline\"\n          value={storyline}\n          onChange={(event) => this.setState({ storyline: event.target.value })}\n        />\n      </label>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <label htmlFor=\"rating\">\n        <p className=\"endingLabels\">AvaliaÃ§Ã£o</p>\n        <input\n          type=\"number\"\n          id=\"rating\"\n          className=\"ratingInput\"\n          name=\"rating\"\n          value={rating}\n          min=\"0\"\n          max=\"5\"\n          onChange={(event) => this.setState({ rating: Number(event.target.value) })}\n        />\n      </label>\n    );\n  }\n\n  renderGenreInput() {\n    const { genre } = this.state;\n    return (\n      <label htmlFor=\"genre\">\n        <p className=\"endingLabels\">GÃªnero</p>\n        <select\n          name=\"genre\"\n          id=\"genre\"\n          value={genre}\n          onChange={(event) => this.setState({ genre: event.target.value })}\n        >\n          <option value=\"action\">AÃ§Ã£o</option>\n          <option value=\"comedy\">ComÃ©dia</option>\n          <option value=\"thriller\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <form className=\"addForm\">\n        {this.renderTitleInput()}\n        <br />\n        {this.renderSubtitleInput()}\n        <br />\n        {this.renderImageInput()}\n        <br />\n        {this.renderStorylineInput()}\n        <br />\n        <div className=\"endingInputs\">\n        {this.renderRatingInput()}\n        {this.renderGenreInput()}\n        <button\n          id=\"addButton\"\n          className=\"addBtn\"\n          type=\"button\"\n          onClick={this.onClickAddMovie}\n        >\n          Adicionar filme\n        </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default AddMovie;\n","import React, { Component } from 'react';\n\nimport MovieList from './MovieList';\nimport SearchBar from './SearchBar';\nimport AddMovie from './AddMovie';\n\nclass MovieLibrary extends Component {\n  constructor(props) {\n    super(props);\n\n    const { movies } = this.props;\n    this.setSearchedText = this.setSearchedText.bind(this);\n    this.setBookMarkedOnly = this.setBookMarkedOnly.bind(this);\n    this.setSelectedGenre = this.setSelectedGenre.bind(this);\n    this.onClickAddMovie = this.onClickAddMovie.bind(this);\n\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies,\n    };\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  onClickAddMovie(newMovie) {\n    const { movies } = this.state;\n    this.setState({ movies: [...movies, newMovie] });\n  }\n\n  setSearchedText(event) {\n    this.setState({ searchText: event.target.value });\n  }\n\n  setBookMarkedOnly(event) {\n    this.setState({ bookmarkedOnly: event.target.checked });\n  }\n\n  setSelectedGenre(event) {\n    this.setState({ selectedGenre: event.target.value });\n  }\n\n  filterBookMarkedMovies(movies) {\n    const { bookmarkedOnly } = this.state;\n    if (bookmarkedOnly === true) {\n      return movies.filter((movie) => movie.bookmarked === true);\n    }\n    return movies;\n  }\n\n  filterByGenre(movies) {\n    const { selectedGenre } = this.state;\n    if (selectedGenre !== '') {\n      return movies.filter((movie) => movie.genre === selectedGenre);\n    }\n    return movies;\n  }\n\n  filterBySearch(movies) {\n    const { searchText } = this.state;\n    const lowerCaseSearchText = searchText.toLowerCase();\n    if (searchText !== '') {\n      return movies.filter((movie) => {\n        const { title, subtitle, storyline } = movie;\n        const lowerCaseTitle = title.toLowerCase();\n        const lowerCaseSubtitle = subtitle.toLowerCase();\n        const lowerCaseStoryline = storyline.toLowerCase();\n\n        return lowerCaseTitle.includes(lowerCaseSearchText)\n          || lowerCaseSubtitle.includes(lowerCaseSearchText)\n          || lowerCaseStoryline.includes(lowerCaseSearchText);\n      });\n    }\n    return movies;\n  }\n\n  filterMovies(movies) {\n    const bookmarkedMovies = this.filterBookMarkedMovies(movies);\n    const genrefied = this.filterByGenre(bookmarkedMovies);\n    const searched = this.filterBySearch(genrefied);\n\n    return searched;\n  }\n\n  render() {\n    const { searchText, bookmarkedOnly, selectedGenre, movies } = this.state;\n    const filteredMovies = this.filterMovies(movies);\n    return (\n      <section>\n        <SearchBar\n          searchText={searchText}\n          onSearchTextChange={this.setSearchedText}\n          bookmarkedOnly={bookmarkedOnly}\n          onBookmarkedChange={this.setBookMarkedOnly}\n          selectedGenre={selectedGenre}\n          onSelectedGenreChange={this.setSelectedGenre}\n        />\n        <MovieList movies={filteredMovies} />\n        <AddMovie onClick={this.onClickAddMovie} />\n      </section>\n    );\n  }\n}\n\nexport default MovieLibrary;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport MovieLibrary from './components/MovieLibrary';\nimport movies from './data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={movies} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}